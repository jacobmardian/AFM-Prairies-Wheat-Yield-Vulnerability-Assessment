# -*- coding: utf-8 -*-
"""
Created on Wed Mar 29 10:25:06 2023

@author: jacob
"""

import os, sys
import numpy as np
import dask
#from dask.distributed import Client
import pandas as pd
import geopandas as gpd
import xarray as xr
import rioxarray as rxr
sys.path.append(r"D:\PhD\YieldProject\Scripts\02_Preprocess")
import yieldfunctions as yf

# User params
stackDir = r"D:\PhD\YieldProject\Data\Rasterstacks"
tempDir = r"D:\PhD\YieldProject\Data\OBIA"
finalDir = r"D:\PhD\YieldProject\Data\Final"
yieldDir = r"D:\PhD\YieldProject\Data\Yield"
nodata = -100000

# Get paths to nc files
canPath = stackDir + "//CanolaData.nc"
wheatPath = stackDir + "//WheatData.nc"

# Set paths to GDAL in virtual env to avoid proj.db errors
os.environ['PROJ_LIB'] = r"C:\Users\jacob\anaconda3\envs\yieldproj\Library\share\proj"
os.environ['GDAL_DATA'] = r"C:\Users\jacob\anaconda3\envs\yieldproj\Library\share"

# Config dask
dask.config.set(**{'array.slicing.split_large_chunks': True})
#client = Client(threads_per_worker=1, n_workers=7)

# Laod data
canola = xr.open_dataset(canPath)
wheat = xr.open_dataset(wheatPath)

# Create dir if doesn't exists
if not os.path.exists(tempDir):
    os.makedirs(tempDir)
if not os.path.exists(finalDir):
    os.makedirs(finalDir)

# Loop through each crop and year, segmenting images and converting to polygons
for crop in ['canola', 'wheat']:
    if crop == 'canola':
        ds = canola
    elif crop == 'wheat':
        ds = wheat
    yeardfs = []
    for year in list(range(2010, 2022)):
        year_char = str(year)
        print(year_char)
        year_path = finalDir + f"//{crop}_{year_char}.csv"
        if not os.path.exists(year_path):
            yearweek = yf.get_maskweek(ds, year_char)
            segPath = tempDir + f"//{crop}segments{year_char}.tif"
            if not os.path.exists(segPath):
                yf.segment_images(ds, segPath, crop, yearweek)
            zoneRas = rxr.open_rasterio(segPath).squeeze()
            weekdfs = []
            for week in list(range(15,39)):  #39
                week_char = str(week)
                print(week_char)
                t = f"{year_char}W{week_char}"
                vardfs = []
                for var in list(ds.keys()):
                    # Get var (e.g., ndvi) tif for zonal stats
                    ras = ds[var].sel(time=t)
                    # Create a mask to mask out areas not canola/wheat before zonal stats
                    mask = xr.where(ras > nodata, ras, nodata, keep_attrs=True).squeeze()
                    zoneMasked = xr.where(mask > nodata, zoneRas, nodata, keep_attrs=True)
                    zones = zoneMasked.values.ravel()
                    data = ras.values.ravel()
                    # Get raster stats in pd df
                    df = yf.zonal_stats_table(data, zones, var, year_char, week_char, nodata)
                    vardfs.append(df)
                # Combine results from ndvi, cdm, yield for the week
                df_week = vardfs[0]
                for i in vardfs:
                    df_week = pd.merge(df_week, i, on = ["ID", "Year", "Week"], suffixes=('', '_y'))
                    df_week.drop(df_week.filter(regex='_y$').columns, axis=1, inplace=True)
                df_week = df_week[df_week.Count > 3] # Remove objects less than 4 pixels
                weekdfs.append(df_week)
            df_year = pd.concat(weekdfs)
            df_year.reset_index(drop = True, inplace = True)
            df_year = yf.interp_df(df_year)
            yeardfs.append(df_year)
            print (df_year)
            df_year.to_csv(year_path)
    df_all = pd.concat(yeardfs)
    fname = f'{crop}Yield_Township.shp'
    yieldshp = r"D:\PhD\YieldProject\Data\Yield" + "\\" + fname
    df_ids = yf.join_twp_ids(df_all, yieldshp, crop, tempDir)
    df_final = yf.agg_to_township(df_ids)
    df_final.rename(columns={'ModeCDM.1': 'Yield'}, inplace = True)
    df_final = yf.fix_yield(df_final, crop, yieldDir)
    df_final = yf.add_latlong(df_final, crop, yieldDir)
    df_final = df_final.dropna()
    df_final.to_csv(finalDir + f"//{crop}_AllYears.csv", index = False)

# READ DATASET
crop = "wheat"
df_final = pd.read_csv(finalDir + f"//{crop}_AllYears.csv")
df_final = df_final.dropna()
df_final.to_csv(finalDir + f"//{crop}_AllYears_dropNA.csv", index = False)







