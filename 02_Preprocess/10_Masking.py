# -*- coding: utf-8 -*-
"""
Created on Tue Mar 14 10:31:23 2023

@author: jacob
"""
import os, glob, sys, gc
import numpy as np
import dask
import xarray as xr
import rioxarray as rxr
sys.path.append(r"D:\PhD\YieldProject\Scripts\02_Preprocess")
import yieldfunctions as yf

# User params
ndviDir = r"D:\PhD\YieldProject\Data\NDVI_Anomalies"
cdmDir = r"D:\PhD\YieldProject\Data\CDM"
yieldRasPath = r"D:\PhD\YieldProject\Data\YieldRasters"
maskPath = r"D:\PhD\AAFC_Data\ACI\Masks"
finalDir = r"D:\PhD\YieldProject\Data\Rasterstacks"

# Set paths to GDAL in virtual env to avoid proj.db errors
os.environ['PROJ_LIB'] = r"C:\Users\jacob\.conda\envs\yield\Library\share\proj"
os.environ['GDAL_DATA'] = r"C:\Users\jacob\.conda\envs\yield\Library\share"

# Config dask
dask.config.set(**{'array.slicing.split_large_chunks': True})

# Initialize other vars
# NDVI data
ncfPath = ndviDir + "\\NDVIAnomalies_20102021_Baseline20022021.nc"
ndvi = xr.open_dataset(ncfPath, chunks = 'auto').set_coords(("spatial_ref"))
# CDM data
cdmPath = cdmDir + "\\CDM_20102021.nc"
cdm = xr.open_dataset(cdmPath, chunks = 'auto').set_coords(("spatial_ref")).rename({'cdm': "ndvi"})
# Yield data
canola = xr.open_dataset(yieldRasPath + "//CanolaYield_20102021.nc", chunks = 'auto').rename({'canola': "ndvi"}).set_coords(("spatial_ref"))
wheat = xr.open_dataset(yieldRasPath + "//WheatYield_20102021.nc", chunks = 'auto').rename({'wheat': "ndvi"}).set_coords(("spatial_ref"))
# Masks from ACI
canmask = xr.open_dataset(maskPath + "//canolamask.nc", chunks = 'auto').set_coords(("spatial_ref")).rename({'canola': "ndvi"})
wheatmask = xr.open_dataset(maskPath + "//wheatmask.nc", chunks = 'auto').set_coords(("spatial_ref")).rename({'wheat': "ndvi"})

# Calculate yield anomalies
can_anom = yf.calc_yield_anomalies(canola, var = 'ndvi')
can_anom_path = yieldRasPath + "//CanolaYieldAnomalies_20102021.nc"
can_anom.to_netcdf(path = can_anom_path, engine="netcdf4", encoding = {"ndvi": {'zlib': True}})
can_anom = xr.open_dataset(can_anom_path, chunks = 'auto').set_coords(("spatial_ref"))
wheat_anom = yf.calc_yield_anomalies(wheat, var = 'ndvi')
wheat_anom_path = yieldRasPath + "//WheatYieldAnomalies_20102021.nc"
wheat_anom.to_netcdf(path = wheat_anom_path, engine="netcdf4", encoding = {"ndvi": {'zlib': True}})
wheat_anom = xr.open_dataset(wheat_anom_path, chunks = 'auto').set_coords(("spatial_ref"))

# Mask CDM and export
cdmCanPath = finalDir + "//CDM_CanMask.nc"
cdmWheatPath = finalDir + "//CDM_WheatMask.nc"
cdm_canmask = xr.where(canola >= 0, cdm, np.nan, keep_attrs=True)
cdm_canmask = xr.where(canmask > 0, cdm_canmask, np.nan, keep_attrs=True)
cdm_wheatmask = xr.where(wheat >= 0, cdm, np.nan, keep_attrs=True)
cdm_wheatmask = xr.where(wheatmask > 0, cdm_wheatmask, np.nan, keep_attrs=True)
# NAs
cdm_canmask['ndvi'].rio.write_nodata(np.nan, inplace=True)
cdm_wheatmask['ndvi'].rio.write_nodata(np.nan, inplace=True)

# Mask ndvi and export
# Paths
ndvicanPath = finalDir + "\\NDVIAnomalies_CanolaMask.nc"
ndviwheatPath = finalDir + "\\NDVIAnomalies_WheatMask.nc"
# Filters
ndvi_canmask = xr.where(canola >= 0, ndvi, np.nan, keep_attrs=True)
ndvi_canmask = xr.where(canmask > 0, ndvi_canmask, np.nan, keep_attrs=True)
ndvi_canmask = xr.where(cdm_canmask >= 0, ndvi_canmask, np.nan, keep_attrs=True)
ndvi_wheatmask = xr.where(wheat >= 0, ndvi, np.nan, keep_attrs=True)
ndvi_wheatmask = xr.where(wheatmask > 0, ndvi_wheatmask, np.nan, keep_attrs=True)
ndvi_wheatmask = xr.where(cdm_wheatmask >= 0, ndvi_wheatmask, np.nan, keep_attrs=True)

# Mask yield and export
canyieldPath = finalDir + "//CanolaYieldAnom_Masked.nc"
wheatyieldPath = finalDir + "//WheatYieldAnom_Masked.nc"
canyield = xr.where(canola >= 0, can_anom, np.nan, keep_attrs=True)
canyield = xr.where(canmask > 0, canyield, np.nan, keep_attrs=True)
canyield = xr.where(cdm_canmask >= 0, canyield, np.nan, keep_attrs=True)
wheatyield = xr.where(wheat >= 0, wheat_anom, np.nan, keep_attrs=True)
wheatyield = xr.where(wheatmask > 0, wheatyield, np.nan, keep_attrs=True)
wheatyield = xr.where(cdm_wheatmask >= 0, wheatyield, np.nan, keep_attrs=True)
# NAs
canyield['ndvi'].rio.write_nodata(np.nan, inplace=True)
wheatyield['ndvi'].rio.write_nodata(np.nan, inplace=True)

# Finally, CDM and yield by NDVI
cdm_canmask = xr.where(ndvi_canmask <= 1, cdm_canmask, np.nan, keep_attrs=True)
cdm_wheatmask = xr.where(ndvi_wheatmask <= 1, cdm_wheatmask, np.nan, keep_attrs=True)
canyield = xr.where(ndvi_canmask <= 1, canyield, np.nan, keep_attrs=True)
wheatyield = xr.where(ndvi_wheatmask <= 1, wheatyield, np.nan, keep_attrs=True)


# Export netcdfs
# cdm_canmask.rename({'ndvi': "canola"}).to_netcdf(path = cdmCanPath, engine="netcdf4", encoding = {"canola": {'zlib': True}})
# cdm_wheatmask.rename({'ndvi': "wheat"}).to_netcdf(path = cdmWheatPath, engine="netcdf4", encoding = {"wheat": {'zlib': True}})
# ndvi_canmask.rename({'ndvi': "canola"}).to_netcdf(path = ndvicanPath, engine="netcdf4", encoding = {"canola": {"dtype": "f4", 'zlib': True}})
# ndvi_wheatmask.rename({'ndvi': "wheat"}).to_netcdf(path = ndviwheatPath, engine="netcdf4", encoding = {"wheat": {"dtype": "f4", 'zlib': True}})
# canyield.rename({'ndvi': "canola"}).to_netcdf(path = canyieldPath, engine="netcdf4", encoding = {"canola": {'zlib': True}})
# wheatyield.rename({'ndvi': "wheat"}).to_netcdf(path = wheatyieldPath, engine="netcdf4", encoding = {"wheat": {'zlib': True}})

# Combine into one nc for each crop
# First, rename nc files
# ndvi_canmask = ndvi_canmask.rename({'canola': 'ndvi'})
# cdm_canmask = cdm_canmask.rename({'canola': "cdm"})
# canyield = canyield.rename({'canola': "yield"})
# ndvi_wheatmask = ndvi_wheatmask.rename({'wheat': 'ndvi'})
# cdm_wheatmask = cdm_wheatmask.rename({'wheat': "cdm"})
# wheatyield = wheatyield.rename({'wheat': "yield"})
# Combine into one DS
canola_final = ndvi_canmask
canola_final['cdm'] = cdm_canmask['ndvi']
canola_final['yield'] = canyield['ndvi']
wheat_final = ndvi_wheatmask
wheat_final['cdm'] = cdm_wheatmask['ndvi']
wheat_final['yield'] = wheatyield['ndvi']
# Export to nc
canPath = finalDir + "//CanolaData.nc"
wheatPath = finalDir + "//WheatData.nc"
canola_final.to_netcdf(path = canPath, engine="netcdf4", encoding = {"ndvi": {'zlib': True},
                                                                     "cdm": {'zlib': True},
                                                                     "yield": {'zlib': True}})
wheat_final.to_netcdf(path = wheatPath, engine="netcdf4", encoding = {"ndvi": {'zlib': True},
                                                                     "cdm": {'zlib': True},
                                                                     "yield": {'zlib': True}})




# CHECK FOR NUMBER OF NAs
ndvi_canmask = xr.open_dataset(ndvicanPath, chunks = 'auto') 
cdm_canmask = xr.open_dataset(cdmCanPath, chunks = 'auto') 
canyield = xr.open_dataset(canyieldPath, chunks = 'auto') 
ndvi_wheatmask = xr.open_dataset(ndviwheatPath, chunks = 'auto') 
cdm_wheatmask = xr.open_dataset(cdmWheatPath, chunks = 'auto') 
wheatyield = xr.open_dataset(wheatyieldPath, chunks = 'auto') 

non_nans = np.sum(~np.isnan(ndvi_canmask['ndvi'].isel(time=205).values)) 
print (non_nans) 
non_nans2 = np.sum(~np.isnan(cdm_canmask['ndvi'].isel(time=205).values)) 
print (non_nans2) 
non_nans3 = np.sum(~np.isnan(canyield['ndvi'].isel(time=205).values)) 
print (non_nans3) 








