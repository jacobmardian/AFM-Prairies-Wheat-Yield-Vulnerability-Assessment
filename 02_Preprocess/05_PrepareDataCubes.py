# -*- coding: utf-8 -*-
"""
Created on Wed Jan  4 14:19:45 2023

@author: jacob

# Analyze how crop yields change each month based on current CCAP conditions
# (i.e., use only average or better crops as some crops will have lwoer yields due to late seeding/other reasons)
# How does that month's CDM rating change crop yield?
"""
# os libraries
import os
import glob
#import threading
# Geospatial
import numpy as np
#import pandas as pd
import gdal
import ogr
import geopandas as gpd
#import rasterio
import xarray as xr
import rioxarray as rxr
import dask
# Others
# import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import gc 

# Set paths to GDAL in virtual env to avoid proj.db errors
os.environ['PROJ_LIB'] = r"C:\Users\jacob\.conda\envs\yieldproj\Library\share\proj"
os.environ['GDAL_DATA'] = r"C:\Users\jacob\.conda\envs\yieldproj\Library\share"

dask.config.set(**{'array.slicing.split_large_chunks': True})

# User params
dataDir = r"D:\PhD\YieldProject\Data\NDVI_Raw"
cdmDir = r"D:\PhD\AAFC_Data\CDM\Final"
proj = rxr.open_rasterio(r"D:\PhD\YieldProject\Data\CCAP\ccap_test.tif").spatial_ref.crs_wkt

# Define functions
def create_ndvistack(dataDir, clipshp, proj):
    """
    Description
    ----------
    This function takes the ndvi* files, reprojects and clips to Prairies SHP
    * Data https://open.canada.ca/data/en/dataset/ea6b4be2-9826-47f3-a387-33ddf02592f4/resource/e2707a4f-fedd-4094-b67f-374696421641
    Parameters
    ----------
    dataDir : Path to dir containing raw ndvi files
    clipshp : Prairies shpfile path to clip ndvi to Prairies

    Returns
    -------
    xarray stack with time series of raw NDVI images
    """
    import glob
    # def create_julian_weeks(start = datetime(2010, 4, 15), weeks = 23):
    #     datelist = [int(datetime.strftime(start, "%W"))]
    #     date = start
    #     i = 1
    #     while i < weeks:
    #         date = date + timedelta(days=7)
    #         datelist.append(int(datetime.strftime(date, "%W")))
    #         i+=1
    #     return (datelist) 
    # def paths_to_dt_ccap(paths): 
    #     return [datetime.strptime(date.split('/')[-1][-8:-4], '%Y').year for date in paths]
    files = glob.glob(dataDir + "//AgExtent.*.tif")
    def preprocess(ras):
        ras = ras.rio.reproject(proj)
        return ras
    #ndvi = xr.open_mfdataset(files, preprocess=preprocess, chunks = True)
    # Get stack
    #year_var = xr.Variable('year', paths_to_dt_ccap(ccap_files))
    #ccap = xr.concat([rxr.open_rasterio(i, chunks=True, nodata = 0) for i in ccap_files], dim=year_var)
    #ccap = ccap.chunk(chunks={'year': 1, 'band': 1, 'y': 100, 'x': 100})
    
    # Clip
    pr_shp = gpd.read_file(clipshp)
    pr_shp = pr_shp.to_crs(ccap.spatial_ref.crs_wkt)
    ccap = ccap.rio.clip(pr_shp.geometry.values, pr_shp.crs, from_disk=True)
    
    # Fix dims
    ccap = ccap.assign_coords(band=create_julian_weeks())
    ccap = ccap.stack(time=("year", "band"))
    time_var = [str(x[0]) + str(x[1]) for x in ccap.time.values]
    ccap = ccap.assign_coords(time=time_var)
    # Change o to NA, get NDVI on proper scale
    ccap = ccap.where(ccap != 0)
    ccap = (ccap / 10000) - 1
    #ccap_clip = xr.where(ccap_clip != 0, ccap_clip, -999999)
    ccap = ccap.rename("ccap")
    return (ccap)
def create_cdmstack_jw(cdmDir, ccap, proj):
    """
    Description
    ----------
    This function takes the cdm files, reprojects and resamples to CCAP
    
    Parameters
    ----------
    cdmDir : Path to dir containing cdm files
    ccap : ccap xarray

    Returns
    -------
    xarray stack with time series of cdm images aligned with CCAP
    """
    stacklist = []
    for year in [str(x) for x in list(range(10,22))]:
        print (year)
        flist = []
        for month in ["04", "05", "06", "07", "08", "09"]:
            f = glob.glob(cdmDir + f'\\*{year}{month}.tif')[0]
            if month == "04":
                flist.extend([f, f, f])
            elif month in ["05", "07"]:
                flist.extend([f, f, f, f])
            elif month in ["06", "08"]:
                flist.extend([f, f, f, f, f])
            elif month == "09":
                flist.extend([f, f])
        band_var = xr.Variable('band', list(range(1, 24)))
        year_stack = xr.concat([rxr.open_rasterio(i, dtype="uint8").rio.reproject(proj).interp(y=ccap["y"], x=ccap["x"], method = "nearest") for i in flist], dim=band_var)
        year_stack = year_stack.chunk(chunks={'band': 1, 'y': 100, 'x': 100})
        #year_stack = year_stack.where(year_stack != year_stack._FillValue)
        stacklist.append(year_stack)
    year_var = xr.Variable('year', [int("20" + str(x)) for x in list(range(10,22))])
    cdmstack = xr.concat([i for i in stacklist], dim=year_var)
    return (cdmstack)

def create_yieldstack(path, template):
    """
    Description
    ----------
    Get yield data into a stack of rasters (one each year)
    
    Parameters
    ----------
    path : Str
        Path to the yield shapefile
    template: str
        Path to template raster (ccap)

    Returns
    -------
    Xarray of yield rasters for each year
    """
    def rasterize_polygon(vec, ras, outRas, year):
        # Load and prepare
        ras_ds = gdal.Open(template)
        vec_ds = ogr.Open(path)
        shp = vec_ds.GetLayer()
        # Spatial info
        x_res = ras_ds.RasterXSize
        y_res = ras_ds.RasterYSize
        # Transform
        target_ds = gdal.GetDriverByName('GTiff').Create(outRas, x_res, y_res, 1, gdal.GDT_Float32)
        target_ds.SetGeoTransform(ras_ds.GetGeoTransform())
        target_ds.SetProjection(ras_ds.GetProjection())
        band = target_ds.GetRasterBand(1)
        NoData_value = -999999
        band.SetNoDataValue(NoData_value)
        band.FlushCache()
        gdal.RasterizeLayer(target_ds, [1], shp, options=[f"ATTRIBUTE=Yield{year}"])
        target_ds = None
    # Create folder and output rasterized yield
    crop = os.path.basename(path).split("Yield")[0]
    outPath = r"D:\PhD\YieldProject\Data\YieldRasters"
    if not os.path.isdir(outPath):
        os.makedirs(outPath)
    for year in [str(x) for x in list(range(2010,2022))]:
        outRas = os.path.join(outPath, f'{crop}Yield{year}.tif')
        rasterize_polygon(path, template, outRas, year)
    year_var = xr.Variable('year', [x for x in list(range(2010,2022))])
    yieldstack = xr.concat([rxr.open_rasterio(i) for i in glob.glob(outPath + f"\\{crop}*.tif")], dim=year_var)
    yieldstack = yieldstack.chunk(chunks={'year': 1, 'y': 100, 'x': 100})
    return(yieldstack)
    
# Read in CCAP and CDM on Julian week interval
pr_path = r"D:\PhD\AAFC_Data\Boundary\AgExtent_Prairies.shp"
yieldPath = r"D:\PhD\YieldProject\Data\Yield"

# Create DataArrays for each variable
ccap = create_ndvistack(dataDir, pr_path, proj)

cdm = create_cdmstack_jw(cdmDir, ccap, proj)
cdm = cdm.astype(np.dtype(np.int16))
cdm = cdm.rename("cdm")

# For yield, we have to duplicate the output 23 times for each year to match dims
canola = create_yieldstack(os.path.join(yieldPath, "CanolaYield_Township.shp"), template_ras)
wheat = create_yieldstack(os.path.join(yieldPath, "WheatYield_Township.shp"), template_ras)
# Turn 0 to nodata
canola = xr.where(canola != 0, canola, canola.attrs['_FillValue'])
wheat = xr.where(wheat != 0, wheat, wheat.attrs['_FillValue'])

band_var = xr.Variable('band', list(range(1, 24)))
canola_year = xr.concat([canola]*23, dim = band_var)
canola_year = canola_year.rename("canyield")
canola_year = canola_year.chunk(chunks={'year': 1, 'band': 1, 'y': 100, 'x': 100})
wheat_year = xr.concat([wheat]*23, dim = band_var)
wheat_year = wheat_year.rename("wheatyield")
wheat_year = wheat_year.chunk(chunks={'year': 1, 'band': 1, 'y': 100, 'x': 100})

# Create dataset by aligning and combining variables
canola_ds = xr.merge(xr.align(ccap, cdm, canola_year))
canola_ds = canola_ds.chunk(chunks={'year': 1, 'band':1, 'y': 100, 'x': 100})
canola_ds = canola_ds.rename({'band': 'week', 'x':'longitude', 'y': 'latitude'})

#





# To pull vals out of ds
# canola_ds.isel(band=20,x=1332,y=0,year=1)["ccap"].values
# canola_ds.isel(band=20,x=1332,y=0,year=1)["cdm"].values
# canola_ds.isel(band=20,x=1332,y=0,year=1)["yield"].values
# Test export to see if it worked
# test = cdm.loc[2013,1,:,:]
# test.rio.to_raster(join(dataDir, "testcdm4.tif"))
                
# TO PLOT:
canola_ds.sel(year=2010, weeks=3)["ccap"].plot()





