# -*- coding: utf-8 -*-
"""
Created on Wed Dec 14 13:34:20 2022

@author: jacob
"""

import os
os.environ['PROJ_LIB'] = r"C:\Users\jacob\.conda\envs\yield\Library\share\proj"
os.environ['GDAL_DATA'] = r"C:\Users\jacob\.conda\envs\yield\Library\share"
import glob
import pandas as pd
import numpy as np
# from sklearn.linear_model import LinearRegression

yieldPath = r"D:\PhD\YieldProject\Data\Yield"

for yieldFile in glob.glob(yieldPath + "\*_Join*.csv"):
    crop = os.path.basename(yieldFile).split("Yield")[0]
    yieldTable =  pd.read_csv(yieldFile)
    yieldTable.drop(["OBJECTID","geometry", "Shape_Leng", "Shape_Area"], axis = 1, inplace=True)
    
    # Get cols in a list to reorder 
    cols = yieldTable.columns[160:].to_list()
    cols.append("Yield")
    cols = cols[-1:] + cols[:-1]
    
    # Rename CDM cols 
    beforeCols = [col for col in yieldTable if col.startswith('CDM_')]
    newCols = [col[0:4]+col[6:8]+col[4:6] for col in beforeCols]
    yieldTable.columns = yieldTable.columns[0:13].to_list() + newCols + yieldTable.columns[160:].to_list()
    
    # Get Yield from cols to rows
    i=["TWP_ID"]
    long = pd.wide_to_long(yieldTable, stubnames="Yield", i=i, j = "Year")
    long.reset_index(inplace=True)
    
    # Get CDM cols to rows:
    stubnames_cdm = ["CDM_09", "CDM_08", "CDM_07", "CDM_06", "CDM_05", "CDM_04",
                     "CDM_03", "CDM_02", "CDM_01", "CDM_12", "CDM_11", "CDM_10"]
    long = pd.wide_to_long(long, stubnames=stubnames_cdm, i=["TWP_ID", "Year"], j = "Y")
    long.reset_index(inplace=True)
    long = long.loc[long['Year'].astype('str').str[2:4] == long['Y'].astype('str')]
    long.drop(["Y"], axis = 1, inplace=True)
    
    # Get Mons vars from cols to rows:
    stubnames_mons = ["NDMons", "NDMonsGS", "NDMonsNGS", "D0Mons", "D0MonsGS", "D0MonsNGS",
                      "D1Mons", "D1MonsGS", "D1MonsNGS", "D2Mons", "D2MonsGS", "D2MonsNGS",
                      "D3Mons", "D3MonsGS", "D3MonsNGS", "D4Mons", "D4MonsGS", "D4MonsNGS",
                      "AvgDrMag", "AvgDrMagGS", "AvgDrMagNGS"]
    cols = ["TWP_ID"]+ ["Year"] + [cols[0]] + stubnames_cdm + stubnames_mons
    long = pd.wide_to_long(long, stubnames=stubnames_mons, i=["TWP_ID", "Year"], j = "Y")
    long.reset_index(inplace=True)
    long = long.loc[long['Year'].astype('str') == long['Y'].astype('str')]
    long.drop(["Y"], axis = 1, inplace=True)
    long.reset_index(inplace=True, drop=True)
    # Reorder columns
    long = long[cols]
    
    # Change dtypes and dummy variables for modelling
    long = long.astype({'CDM_01': 'uint8', 'CDM_02': 'uint8', 'CDM_03': 'uint8',
                        'CDM_04': 'uint8', 'CDM_05': 'uint8', 'CDM_06': 'uint8',
                        'CDM_07': 'uint8', 'CDM_08': 'uint8', 'CDM_09': 'uint8',
                        'CDM_10': 'uint8', 'CDM_11': 'uint8', 'CDM_12': 'uint8',
                        'NDMons': 'uint8', 'NDMonsGS': 'uint8', 'NDMonsNGS': 'uint8',
                        'D0Mons': 'uint8', 'D0MonsGS': 'uint8', 'D0MonsNGS': 'uint8',
                        'D1Mons': 'uint8', 'D1MonsGS': 'uint8', 'D1MonsNGS': 'uint8',
                        'D2Mons': 'uint8', 'D2MonsGS': 'uint8', 'D2MonsNGS': 'uint8',
                        'D3Mons': 'uint8', 'D3MonsGS': 'uint8', 'D3MonsNGS': 'uint8',
                        'D4Mons': 'uint8', 'D4MonsGS': 'uint8', 'D4MonsNGS': 'uint8'})
    long = long.astype({'TWP_ID': 'string','CDM_01': 'category', 'CDM_02': 'category', 'CDM_03': 'category',
                 'CDM_04': 'category', 'CDM_05': 'category', 'CDM_06': 'category',
                 'CDM_07': 'category', 'CDM_08': 'category', 'CDM_09': 'category',
                 'CDM_10': 'category', 'CDM_11': 'category', 'CDM_12': 'category'})
    long.to_csv(os.path.join(yieldPath, "YieldCDM{}_Ordinal.csv".format(crop)), index = False)
    dummy = pd.get_dummies(long.iloc[:,3:15])
    dummy.reset_index(inplace=True)
    long.reset_index(inplace=True)
    df1 = pd.merge(long.iloc[:,0:4], dummy)
    df = pd.merge(df1, long.iloc[:, np.r_[0, -21:0]])
    df.drop(["index"], axis = 1, inplace=True)
    df.to_csv(os.path.join(yieldPath, "YieldCDM{}_OneHot.csv".format(crop)), index = False)

# X = df.iloc[:, 3:]
# Y = df["Yield"]


# creating an object of LinearRegression class
# mlr = LinearRegression()
# # fitting the training data
# mlr.fit(X, Y)
# print("Intercept: ", mlr.intercept_)
# print("Coefficients:")
# list(zip(long.iloc[:,3:], mlr.coef_))
