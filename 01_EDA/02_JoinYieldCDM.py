# -*- coding: utf-8 -*-
"""
Created on Mon Dec 12 10:37:34 2022

@author: jacob
"""

import os
os.environ['PROJ_LIB'] = r"C:\Users\jacob\.conda\envs\yield\Library\share\proj"
os.environ['GDAL_DATA'] = r"C:\Users\jacob\.conda\envs\yield\Library\share"
import glob
import pandas as pd
import geopandas as gpd
import numpy as np
import rasterio
from rasterstats import zonal_stats

cdmPath = r"D:\PhD\AAFC_Data\CDM\Final"
yieldPath = r"D:\PhD\YieldProject\Data\Yield"

# Zonal stats and append majority CDM to yield shapefile
for yieldFile in glob.glob(yieldPath + "\*Yield_Township.shp")[0]:
    yieldShp =  gpd.read_file(yieldFile)
    # Remove townships without yield data in 50% of years (6) or more
    def count_na_yield(row, num):
        return np.where(np.array(row) == num)[0].shape[0]
    yieldCols = yieldShp.loc[:,['Yield' in i for i in yieldShp.columns]].columns
    yieldShp.drop(index=np.where(np.array(yieldShp[yieldCols].apply(count_na_yield, axis=1, num = 0)) > 5)[0], inplace=True)
    yieldShp.reset_index(drop=True, inplace=True)
    for cdmFile in glob.glob(cdmPath + "\*.tif"):
        if int(os.path.basename(cdmFile)[4:6]) >= 10 or os.path.basename(cdmFile)[4:8] in ["0910", "0911","0912"]:
            print(os.path.basename(cdmFile)[0:8])
            with rasterio.open(cdmFile) as cdm_src:
                cdmRas = cdm_src.read()
            # Project shapefile to raster projection 
            if cdmFile == os.path.join(cdmPath, "CDM_0910.tif"):
                yieldShp = yieldShp.to_crs(cdm_src.crs.to_dict())
            # Overlay CDM raster with yield shapefile
            yieldShp = yieldShp.join(pd.DataFrame(zonal_stats(vectors=yieldShp['geometry'], 
                                                              raster=cdmFile, 
                                                              stats=['majority'])),
                                                  how='left')
            # Change no data values and nan to 255 and data type to uint8
            yieldShp['majority'] = yieldShp['majority'].fillna(255)
            ndval = np.unique(yieldShp['majority'])[0]
            if ndval != 0:
                yieldShp.loc[yieldShp['majority'] == ndval, 'majority'] = 255
            yieldShp = yieldShp.astype({'majority': 'int8'})
            colname = os.path.basename(cdmFile)[0:8]
            yieldShp.rename(columns={'majority':'{}'.format(colname)}, inplace=True)
            #print(yieldShp)
    # Calculate indicators
    for year in range(2010, 2022):
        # Get CDM columns
        cdmCols = yieldShp.loc[:,['CDM' in i for i in yieldShp.columns]].columns
        # Get correct months for that yield year (e.g., Oct 2009 to Sept 2010 for 2010)
        if year == 2010:
            months_ind = list(range(0,12))
        else:
            months_ind = [i + 12 for i in months_ind]
        months = cdmCols[months_ind]
        # Calculate the number of months in each severity category
        # GS = Growing Season
        # NGS = non-GS
        # Define function to apply to each row
        def count_cdm(row, num):
            return np.where(np.array(row) == num)[0].shape[0]
        yieldShp["NDMons{}".format(str(year))] = np.array(yieldShp[months].apply(count_cdm, axis=1, num = 0))
        yieldShp["NDMonsNGS{}".format(str(year))] = np.array(yieldShp[months[0:6]].apply(count_cdm, axis=1, num = 0))
        yieldShp["NDMonsGS{}".format(str(year))] = np.array(yieldShp[months[6:12]].apply(count_cdm, axis=1, num = 0))
        yieldShp["D0Mons{}".format(str(year))] = np.array(yieldShp[months].apply(count_cdm, axis=1, num = 1))
        yieldShp["D0MonsNGS{}".format(str(year))] = np.array(yieldShp[months[0:6]].apply(count_cdm, axis=1, num = 1))
        yieldShp["D0MonsGS{}".format(str(year))] = np.array(yieldShp[months[6:12]].apply(count_cdm, axis=1, num = 1))
        yieldShp["D1Mons{}".format(str(year))] = np.array(yieldShp[months].apply(count_cdm, axis=1, num = 2))
        yieldShp["D1MonsNGS{}".format(str(year))] = np.array(yieldShp[months[0:6]].apply(count_cdm, axis=1, num = 2))
        yieldShp["D1MonsGS{}".format(str(year))] = np.array(yieldShp[months[6:12]].apply(count_cdm, axis=1, num = 2))
        yieldShp["D2Mons{}".format(str(year))] = np.array(yieldShp[months].apply(count_cdm, axis=1, num = 3))
        yieldShp["D2MonsNGS{}".format(str(year))] = np.array(yieldShp[months[0:6]].apply(count_cdm, axis=1, num = 3))
        yieldShp["D2MonsGS{}".format(str(year))] = np.array(yieldShp[months[6:12]].apply(count_cdm, axis=1, num = 3))
        yieldShp["D3Mons{}".format(str(year))] = np.array(yieldShp[months].apply(count_cdm, axis=1, num = 4))
        yieldShp["D3MonsNGS{}".format(str(year))] = np.array(yieldShp[months[0:6]].apply(count_cdm, axis=1, num = 4))
        yieldShp["D3MonsGS{}".format(str(year))] = np.array(yieldShp[months[6:12]].apply(count_cdm, axis=1, num = 4))
        yieldShp["D4Mons{}".format(str(year))] = np.array(yieldShp[months].apply(count_cdm, axis=1, num = 5))
        yieldShp["D4MonsNGS{}".format(str(year))] = np.array(yieldShp[months[0:6]].apply(count_cdm, axis=1, num = 5))
        yieldShp["D4MonsGS{}".format(str(year))] = np.array(yieldShp[months[6:12]].apply(count_cdm, axis=1, num = 5))
        # Measure of total drought magnitude:
        def calc_mag(row):
            return np.array(row).mean()
        yieldShp["AvgDrMag{}".format(str(year))] = np.array(yieldShp[months].apply(calc_mag, axis=1))
        yieldShp["AvgDrMagNGS{}".format(str(year))] = np.array(yieldShp[months[0:6]].apply(calc_mag, axis=1))
        yieldShp["AvgDrMagGS{}".format(str(year))] = np.array(yieldShp[months[6:12]].apply(calc_mag, axis=1))


    # Remove townships without CDM ratings every month
    def count_na_cdm(row, num):
        return np.where(np.array(row) == num)[0].shape[0]
    cdmCols = yieldShp.loc[:,['CDM' in i for i in yieldShp.columns]].columns
    yieldShp.drop(index=np.where(np.array(yieldShp[cdmCols].apply(count_na_cdm, axis=1, num = 255)) > 0)[0], inplace = True)
    yieldShp.reset_index(drop=True, inplace=True)
    # Write to file
    outfile = os.path.join(yieldPath, os.path.basename(yieldFile)[0:-4] + "_Join.csv")
    #yieldShp.to_csv(outfile, index = False)  
    
    #### ADDED LATER
    yieldShp = pd.read_csv(os.path.join(yieldPath, os.path.basename(yieldFile)[0:-4] + "_Join.csv"))
    speiDir = r"D:\PhD\SHAPProject\Data\SPEI3"
    for speiFile in glob.glob(speiDir + "\*.tif"):
        # Zonal stats to add SPEI3 > 1.5 as excessive moisture category
    
    
    