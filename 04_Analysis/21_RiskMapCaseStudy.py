import os
from copy import deepcopy
import sys
sys.path.append(r"D:\PhD\YieldProject\Scripts\04_Analysis")
import yieldfunctions as yf
import pandas as pd
import geopandas as gpd
import numpy as np
import matplotlib.pyplot as plt
import contextily as cx
import importlib
importlib.reload(yf)

# Set paths to GDAL in virtual env to avoid proj.db errors
os.environ['PROJ_LIB'] = r"C:\Users\jacob\miniconda3\envs\yieldprojconda\Library\share\proj"
os.environ['GDAL_DATA'] = r"C:\Users\jacob\miniconda3\envs\yieldprojconda\Library\share"
pd.set_option('display.max_columns', None)

mapDir = r"D:\PhD\YieldProject\Output_Detrended\Plots\RiskMapCaseStudy_Adjusted2"
riskDir = mapDir + "//RiskMaps"
anomDir = mapDir + "//AnomalyMaps"
predDir = r"D:\PhD\YieldProject\Output_Detrended\Predictions"
month_dict = {'May': list(range(18, 22)), 'June': list(range(22, 27)), 'July': list(range(27, 31)), 'August': list(range(31, 36))}
os.makedirs(mapDir, exist_ok=True)
os.makedirs(riskDir, exist_ok=True)
os.makedirs(anomDir, exist_ok=True)

# Get data
df = pd.read_csv(predDir + "//AllPredictions.csv")
#df = df[df['TotalYield'] > 0]
twp = np.unique(df.TWP_ID)
df_twp = pd.DataFrame({'TWP_ID': np.unique(df['TWP_ID'])})
df_twp = df_twp.sort_values(by =['TWP_ID']).reset_index(drop=True)
twp_shp = gpd.read_file(r"D:\PhD\YieldProject\Data\Yield\WheatYield_Township.shp")
twp_shp = twp_shp[['TWP_ID', 'geometry']]
twp_shp = twp_shp[twp_shp['TWP_ID'].isin(df_twp['TWP_ID'])]
twp_shp.reset_index(drop=True, inplace=True)
twp_shp = twp_shp.sort_values(by =['TWP_ID']).reset_index(drop=True)

# Compute yield risk and observed anomalies
df['YieldRisk_Z'] = (df['PredMean'] - df['MeanTotalYield']) / df['StdTotalYield']
df['YieldAnom'] = (df['TotalYield'] - df['MeanTotalYield']) / df['StdTotalYield']
#df = df[df['Week'] > 17]

# For each month, create risk map
for year in range(2010, 2022):
    df_year = df[df['Year'] == year]
    for month in ['May', 'June', 'July', 'August']:
        # Prep the data
        df_month = df_year[df_year['Week'].isin(month_dict[month])]
        df_twp = df_month.groupby('TWP_ID').apply(lambda x: x['YieldRisk_Z'].mean()).reset_index().rename(columns={0:'YieldRisk_Z'})
        shp = deepcopy(twp_shp)
        shp = shp.merge(df_twp.loc[:,['YieldRisk_Z', 'TWP_ID']], on='TWP_ID')

        # Make the map
        xmin, ymin, xmax, ymax = shp.total_bounds
        fig, ax = plt.subplots(figsize=(9, 7))
        shp.plot(column='YieldRisk_Z', cmap='YlOrRd_r', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True, scheme='UserDefined',
                 legend_kwds=dict(loc='best', title="Wheat Yield Risk", frameon=False, fmt="{:.0f}"),
                 # classification_kwds={'bins': [-2, -1.5, -1, -0.5, 0.5]}
                 # classification_kwds = {'bins': [-1.25, -1, -0.75, -0.5, 0.5]}
                 classification_kwds={'bins': [-1.25, -1, -0.75, -0.25, 0.5]}
                )
        cx.add_basemap(ax, source=cx.providers.Stamen.TonerLite, crs=twp_shp.crs.to_string(), attribution_size=0)
        # Create spacing from data to map frame
        ax.set_xlim(xmin - 30000, xmax + 30000)
        ax.set_ylim(ymin - 20000, ymax + 20000)
        ax.set_xlabel('Longitude')
        ax.set_ylabel('Latitude')
        # Fix legend labels
        new_labels = ['No Risk', 'Low Risk', 'Moderate Risk', 'High Risk', 'Very High Risk', 'Exceptional Risk']
        new_labels.reverse()
        legend = ax.get_legend()
        for label, text in zip(legend.get_texts(), new_labels):
            label.set_text(text)
        # Set custom tick positions and labels for the x-axis
        xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
        xtick_positions = [x * 1e6 for x in xtick_positions]
        xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
        plt.xticks(xtick_positions, xtick_labels)
        ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
        ytick_positions = [x * 1e6 for x in ytick_positions]
        ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
        plt.yticks(ytick_positions, ytick_labels)
        plt.savefig(riskDir + f'//{year}{month}_YieldRiskMap.png', bbox_inches='tight', dpi=1200)
        plt.show()

    # Map anomalies
    df_twp = df_month.groupby('TWP_ID').apply(lambda x: x['YieldAnom'].mean()).reset_index().rename(columns={0:'YieldAnom'})
    shp = deepcopy(twp_shp)
    shp = shp.merge(df_twp.loc[:,['YieldAnom', 'TWP_ID']], on='TWP_ID')
    # Make the map
    xmin, ymin, xmax, ymax = shp.total_bounds
    fig, ax = plt.subplots(figsize=(9, 7))
    shp.plot(column='YieldAnom', cmap='YlOrRd_r', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
             scheme='UserDefined',
             legend_kwds=dict(loc='best', title="Wheat Yield", frameon=False, fmt="{:.0f}"),
             classification_kwds={'bins': [-2, -1.5, -1, -0.5, 0.5]}
             )
    cx.add_basemap(ax, source=cx.providers.Stamen.TonerLite, crs=twp_shp.crs.to_string(), attribution_size=0)
    # Create spacing from data to map frame
    ax.set_xlim(xmin - 30000, xmax + 30000)
    ax.set_ylim(ymin - 20000, ymax + 20000)
    ax.set_xlabel('Longitude')
    ax.set_ylabel('Latitude')
    # Fix legend labels
    new_labels = ['Above Average', 'Average', 'Below Average', 'Low', 'Very Low', 'Exceptionally Low']
    new_labels.reverse()
    legend = ax.get_legend()
    for label, text in zip(legend.get_texts(), new_labels):
        label.set_text(text)
    # Set custom tick positions and labels for the x-axis
    xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
    xtick_positions = [x * 1e6 for x in xtick_positions]
    xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
    plt.xticks(xtick_positions, xtick_labels)
    ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
    ytick_positions = [x * 1e6 for x in ytick_positions]
    ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
    plt.yticks(ytick_positions, ytick_labels)
    plt.savefig(anomDir + f'//{year}_YieldAnomMap.png', bbox_inches='tight', dpi=1200)
    plt.show()

cdm = gpd.read_file(r"D:\PhD\YieldProject\Data\CDM\CDMJuly2015TWP.shp")
cdm = cdm[cdm['TWP_ID'].isin(twp)]
# Make the map
xmin, ymin, xmax, ymax = cdm.total_bounds
fig, ax = plt.subplots(figsize=(9, 7))
cdm.plot(column='MAJORITY', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
         scheme='NaturalBreaks',
         legend_kwds=dict(loc='best', title="Wheat Yield", frameon=False, fmt="{:.0f}"),
         )
cx.add_basemap(ax, source=cx.providers.Stamen.TonerLite, crs=twp_shp.crs.to_string(), attribution_size=0)
# Create spacing from data to map frame
ax.set_xlim(xmin - 30000, xmax + 30000)
ax.set_ylim(ymin - 20000, ymax + 20000)
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
# Fix legend labels
new_labels = ['ND', 'D0', 'D1', 'D2', 'D3']
legend = ax.get_legend()
for label, text in zip(legend.get_texts(), new_labels):
    label.set_text(text)
# Set custom tick positions and labels for the x-axis
xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
xtick_positions = [x * 1e6 for x in xtick_positions]
xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
plt.xticks(xtick_positions, xtick_labels)
ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
ytick_positions = [x * 1e6 for x in ytick_positions]
ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
plt.yticks(ytick_positions, ytick_labels)
plt.savefig(mapDir + f'//CDM_July2015.png', bbox_inches='tight', dpi=1200)
plt.show()

