import os
import sys
sys.path.append(r"D:\PhD\YieldProject\Scripts\04_Analysis")
import yieldfunctions as yf
from random import sample
import pandas as pd
import geopandas as gpd
import numpy as np
import matplotlib.pyplot as plt
#import cartopy.crs as ccrs
import contextily as cx

import importlib
importlib.reload(yf)

# Set paths to GDAL in virtual env to avoid proj.db errors
os.environ['PROJ_LIB'] = r"C:\Users\jacob\miniconda3\envs\yieldprojconda\Library\share\proj"
os.environ['GDAL_DATA'] = r"C:\Users\jacob\miniconda3\envs\yieldprojconda\Library\share"

# User params
predDir = r"D:\PhD\YieldProject\Output_Detrended_Ha\Predictions"
scatterplotDir = r"D:\PhD\YieldProject\Output_Detrended_Ha\Plots\TripleCI"
accmapDir = r"D:\PhD\YieldProject\Output_Detrended_Ha\Plots\AccuracyMaps"
os.makedirs(scatterplotDir, exist_ok=True)
os.makedirs(accmapDir, exist_ok=True)

# Load predictions
df = pd.read_csv(predDir + "//AllPredictions.csv")

###################### TRIPLE CI SCATTERPLOT FOR RANDOM TWP AND YEAR ###########################################
# Choose random township and year to plot
twp = np.unique(df.TWP_ID)[sample(list(range(0, len(np.unique(df.TWP_ID)))), 1)][0] #REMAKE 01813W3, 2015
y = np.unique(df.Year)[sample(list(range(0, len(np.unique(df.Year)))), 1)][0]
df_twp = df[(df["TWP_ID"] == twp) & (df["Year"] == y)].reset_index(drop=True)
# Plot
x = df_twp['Week']
plt.errorbar(x, df_twp['PredMean'], yerr=df_twp['PredStd'], fmt='or', alpha=1, label='68% CI')
plt.errorbar(x, df_twp['PredMean'], yerr=df_twp['PredStd']*1.96, fmt='or', alpha=0.5, label='95% CI')
plt.errorbar(x, df_twp['PredMean'], yerr=df_twp['PredStd']*2.58, fmt='or', alpha=0.25, label='99% CI')
plt.axhline(y=df_twp['TotalYield'].iloc[0], color='black', linestyle='--', label = 'Observed\nYield')
plt.xticks(range(x.min(), x.max()+1), x, rotation='vertical')
plt.xlabel("Week")
plt.ylabel("Yield (kg/ha)")
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.subplots_adjust(right=0.8)
plt.savefig(scatterplotDir + f'\\Scatterplot_TWP{twp}_Year{y}.png', bbox_inches='tight', dpi=1200)
plt.show()

##################################### Map Evaluation Metrics ###########################################
df_twp = pd.DataFrame({'TWP_ID': np.unique(df['TWP_ID'])})
df_twp = df_twp.sort_values(by =['TWP_ID'])
twp_shp = gpd.read_file(r"D:\PhD\YieldProject\Data\Yield\WheatYield_Township.shp")
twp_shp = twp_shp[['TWP_ID', 'geometry']]
twp_shp = twp_shp[twp_shp['TWP_ID'].isin(df_twp['TWP_ID'])]
twp_shp.reset_index(drop=True, inplace=True)
twp_shp = twp_shp.sort_values(by =['TWP_ID']).reset_index(drop=True)

# Group by 'ID' and calculate multiple metrics
for week in np.unique(df['Week']):
    print (week)
    df_week = df[df['Week'] == week]
    df_week = df_week.sort_values(by = ['TWP_ID']).reset_index(drop=True)
    mae = df_week.groupby('TWP_ID').apply(yf.calculate_mae)
    df_twp[f'MAE_Week{week}'] = mae.values

# Get week with minimum mae
min_col = df_twp[df_twp.columns[1:]].idxmin(axis=1)
min_mae = df_twp[df_twp.columns[1:]].min(axis=1)
twp_shp['Week_MinMAE'] = min_col.str[-2:].astype('int')
twp_shp['MinMAE'] = min_mae

# Create a map plot for MinMAE
xmin, ymin, xmax, ymax = twp_shp.total_bounds
fig, ax = plt.subplots(figsize=(9, 7))
twp_shp.plot(column='MinMAE', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
             scheme='quantiles',
             legend_kwds=dict(loc='best',
                              title="MAE (kg/ha)",
                              frameon=False, fmt="{:.0f}")
             )
cx.add_basemap(ax, source=cx.providers.CartoDB.PositronNoLabels, crs=twp_shp.crs.to_string(), attribution_size=0)
# Create spacing from data to map frame
ax.set_xlim(xmin-30000, xmax+30000)
ax.set_ylim(ymin-20000, ymax+20000)
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
# Fix legend labels
current_labels = [t.get_text() for t in ax.get_legend().get_texts()]
new_labels = yf.create_new_labels(current_labels)
new_labels = {0: '88 - 260', 1: new_labels[1], 2: new_labels[2], 3: new_labels[3], 4: '435 - 931'}
yf.update_custom_legend_labels(ax, new_labels)
# Set custom tick positions and labels for the x-axis
xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
xtick_positions = [x * 1e6 for x in xtick_positions]
xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
plt.xticks(xtick_positions, xtick_labels)
ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
ytick_positions = [x * 1e6 for x in ytick_positions]
ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
plt.yticks(ytick_positions, ytick_labels)
plt.savefig(accmapDir + '//MAEMap.png', bbox_inches='tight', dpi=1200)
plt.show()

# Create a map plot with the week of min MAE
xmin, ymin, xmax, ymax = twp_shp.total_bounds
fig, ax = plt.subplots(figsize=(9, 7))
twp_shp.plot(column='Week_MinMAE', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
             scheme='userdefined',
             legend_kwds=dict(loc='best',
                              title="Best WOY",
                              frameon=False, fmt="{:.0f}"),
             classification_kwds={'bins': [29, 31, 32, 34, 38]}
             )
#cx.add_basemap(ax, source='https://api.maptiler.com/maps/bright/{z}/{x}/{y}{r}.png?key=iUKSMZtdZsw6ibSnRYDj', crs=twp_shp.crs.to_string(), attribution_size=0)
cx.add_basemap(ax, source=cx.providers.CartoDB.PositronNoLabels, crs=twp_shp.crs.to_string(), attribution_size=0)

# Create spacing from data to map frame
ax.set_xlim(xmin-30000, xmax+30000)
ax.set_ylim(ymin-20000, ymax+20000)
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
# Fix legend labels
current_labels = [t.get_text() for t in ax.get_legend().get_texts()]
new_labels = yf.create_new_labels2(current_labels, type = "week")
new_labels = {0: '27 - 29', 1: new_labels[1], 2: new_labels[2], 3: new_labels[3], 4: '34 - 36'}
yf.update_custom_legend_labels(ax, new_labels)
# Set custom tick positions and labels for the x-axis
# Set custom tick positions and labels for the x-axis
xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
xtick_positions = [x * 1e6 for x in xtick_positions]
xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
plt.xticks(xtick_positions, xtick_labels)
ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
ytick_positions = [x * 1e6 for x in ytick_positions]
ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
plt.yticks(ytick_positions, ytick_labels)
plt.savefig(accmapDir + '//Week_MAEMap.png', bbox_inches='tight', dpi=1200)
plt.show()
