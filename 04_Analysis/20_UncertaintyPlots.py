import os
import sys
sys.path.append(r"D:\PhD\YieldProject\Scripts\04_Analysis")
import yieldfunctions as yf
import pandas as pd
import geopandas as gpd
import numpy as np
import matplotlib.pyplot as plt
import contextily as cx
import importlib
importlib.reload(yf)

# Set paths to GDAL in virtual env to avoid proj.db errors
os.environ['PROJ_LIB'] = r"C:\Users\jacob\miniconda3\envs\yieldprojconda\Library\share\proj"
os.environ['GDAL_DATA'] = r"C:\Users\jacob\miniconda3\envs\yieldprojconda\Library\share"
pd.set_option('display.max_columns', None)

# Get valid twps
predDir = r"D:\PhD\YieldProject\Output_Detrended_Ha\Predictions"
plotDir = r"D:\PhD\YieldProject\Output_Detrended_Ha\Plots\UncertaintyPlots"
os.makedirs(plotDir, exist_ok=True)

# Get data
df = pd.read_csv(predDir + "//AllPredictions.csv")
twp = np.unique(df.TWP_ID)
df_twp = pd.DataFrame({'TWP_ID': np.unique(df['TWP_ID'])})
df_twp = df_twp.sort_values(by =['TWP_ID']).reset_index(drop=True)
twp_shp = gpd.read_file(r"D:\PhD\YieldProject\Data\Yield\WheatYield_Township.shp")
twp_shp = twp_shp[['TWP_ID', 'geometry']]
twp_shp = twp_shp[twp_shp['TWP_ID'].isin(df_twp['TWP_ID'])]
twp_shp.reset_index(drop=True, inplace=True)
twp_shp = twp_shp.sort_values(by =['TWP_ID']).reset_index(drop=True)

# Calculate uncertainty for each week
# Group by 'ID' and calculate IC95
# for week in np.unique(df['Week']):
#     print (week)
#     df_week = df[df['Week'] == week]
#     df_week = df_week.sort_values(by = ['TWP_ID']).reset_index(drop=True)

# Create a map plot for IC95Diff
twp_shp['IC95Diff'] = df.groupby('TWP_ID').apply(yf.calculate_ic).values
xmin, ymin, xmax, ymax = twp_shp.total_bounds
fig, ax = plt.subplots(figsize=(9, 7))
twp_shp.plot(column='IC95Diff', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
             scheme='quantiles',
             legend_kwds=dict(loc='best',
                              title="IC95Error",
                              frameon=False, fmt="{:.0f}")
             )
cx.add_basemap(ax, source=cx.providers.Stamen.TonerLite, crs=twp_shp.crs.to_string(), attribution_size=0)
# Create spacing from data to map frame
ax.set_xlim(xmin-30000, xmax+30000)
ax.set_ylim(ymin-20000, ymax+20000)
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
# Fix legend labels
current_labels = [t.get_text() for t in ax.get_legend().get_texts()]
new_labels = yf.create_new_labels(current_labels, type = "noround")
yf.update_custom_legend_labels(ax, new_labels)
# Set custom tick positions and labels for the x-axis
xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
xtick_positions = [x * 1e6 for x in xtick_positions]
xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
plt.xticks(xtick_positions, xtick_labels)
ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
ytick_positions = [x * 1e6 for x in ytick_positions]
ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
plt.yticks(ytick_positions, ytick_labels)
plt.savefig(plotDir + '//UncertaintyMap_IC95Error.png', bbox_inches='tight', dpi=1200)
plt.show()

# Create map for total uncertainty at 95% CI
twp_shp['Uncert95'] = df.groupby('TWP_ID').apply(lambda x: x['PredStd'].mean()).values
xmin, ymin, xmax, ymax = twp_shp.total_bounds
fig, ax = plt.subplots(figsize=(9, 7))
twp_shp.plot(column='Uncert95', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
             scheme='quantiles',
             legend_kwds=dict(loc='best',
                              title="Uncertainty (kg/ha)\n95% CI",
                              frameon=False, fmt="{:.0f}")
             )
cx.add_basemap(ax, source=cx.providers.CartoDB.PositronNoLabels, crs=twp_shp.crs.to_string(), attribution_size=0)
# Create spacing from data to map frame
ax.set_xlim(xmin-30000, xmax+30000)
ax.set_ylim(ymin-20000, ymax+20000)
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
# Fix legend labels
current_labels = [t.get_text() for t in ax.get_legend().get_texts()]
new_labels = yf.create_new_labels(current_labels, type = "noround")
yf.update_custom_legend_labels(ax, new_labels)
# Set custom tick positions and labels for the x-axis
xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
xtick_positions = [x * 1e6 for x in xtick_positions]
xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
plt.xticks(xtick_positions, xtick_labels)
ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
ytick_positions = [x * 1e6 for x in ytick_positions]
ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
plt.yticks(ytick_positions, ytick_labels)
plt.savefig(plotDir + '//TotalUncertaintyMap_95CI.png', bbox_inches='tight', dpi=1200)
plt.show()

# Create map for total uncertainty at 95% CI (as a %)
# For each month:
month_dict = {'April': list(range(15, 18)), 'May': list(range(18, 22)), 'June': list(range(22, 27)),
              'July': list(range(27, 31)), 'August': list(range(31, 36)), 'September': list(range(36, 39))}
for month in ['May', 'June', 'July', 'August','September']:
    df_month = df[df['Week'].isin(month_dict[month])]
    df_month['Std68'] = ((df_month['PredStd'] / df_month['PredMean'])*100) * 1.96
    twp_shp['Uncert95Perc'] = df_month.groupby('TWP_ID').apply(lambda x: x['Std68'].mean()).values
    xmin, ymin, xmax, ymax = twp_shp.total_bounds
    fig, ax = plt.subplots(figsize=(9, 7))
    twp_shp.plot(column='Uncert95Perc', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
                 scheme='quantiles',
                 legend_kwds=dict(loc='best',
                                  title="Uncertainty (%)\n95% CI",
                                  frameon=False, fmt="{:.0f}")
                 )
    cx.add_basemap(ax, source=cx.providers.CartoDB.PositronNoLabels, crs=twp_shp.crs.to_string(), attribution_size=0)
    # Create spacing from data to map frame
    ax.set_xlim(xmin-30000, xmax+30000)
    ax.set_ylim(ymin-20000, ymax+20000)
    ax.set_xlabel('Longitude')
    ax.set_ylabel('Latitude')
    # Fix legend labels
    current_labels = [t.get_text() for t in ax.get_legend().get_texts()]
    new_labels = yf.create_new_labels(current_labels, type = "noround")
    if month == 'August':
        new_labels = {0: '19 - 27', 1: new_labels[1], 2: new_labels[2], 3: new_labels[3], 4: '39 - 58'}
    yf.update_custom_legend_labels(ax, new_labels)
    # Set custom tick positions and labels for the x-axis
    xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
    xtick_positions = [x * 1e6 for x in xtick_positions]
    xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
    plt.xticks(xtick_positions, xtick_labels)
    ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
    ytick_positions = [x * 1e6 for x in ytick_positions]
    ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
    plt.yticks(ytick_positions, ytick_labels)
    plt.savefig(plotDir + f'//UncertPercMap_{month}_95CI.png', bbox_inches='tight', dpi=1200)
    plt.show()

# Create map for mean yield
twp_shp['MeanYield'] = df.groupby('TWP_ID').apply(lambda x: x['PredMean'].mean()).values
xmin, ymin, xmax, ymax = twp_shp.total_bounds
fig, ax = plt.subplots(figsize=(9, 7))
twp_shp.plot(column='MeanYield', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
             scheme='quantiles',
             legend_kwds=dict(loc='best',
                              title="Mean Yield (kg/ha)",
                              frameon=False, fmt="{:.0f}")
             )
cx.add_basemap(ax, source=cx.providers.Stamen.TonerLite, crs=twp_shp.crs.to_string(), attribution_size=0)
# Create spacing from data to map frame
ax.set_xlim(xmin-30000, xmax+30000)
ax.set_ylim(ymin-20000, ymax+20000)
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
# Fix legend labels
current_labels = [t.get_text() for t in ax.get_legend().get_texts()]
new_labels = yf.create_new_labels(current_labels, type = "noround")
yf.update_custom_legend_labels(ax, new_labels)
# Set custom tick positions and labels for the x-axis
xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
xtick_positions = [x * 1e6 for x in xtick_positions]
xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
plt.xticks(xtick_positions, xtick_labels)
ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
ytick_positions = [x * 1e6 for x in ytick_positions]
ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
plt.yticks(ytick_positions, ytick_labels)
plt.savefig(plotDir + '//MeanYieldMap.png', bbox_inches='tight', dpi=1200)
plt.show()

# Create map for std yield
twp_shp['StdYield'] = df.groupby('TWP_ID').apply(lambda x: x['PredMean'].std()).values
xmin, ymin, xmax, ymax = twp_shp.total_bounds
fig, ax = plt.subplots(figsize=(9, 7))
twp_shp.plot(column='StdYield', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
             scheme='quantiles',
             legend_kwds=dict(loc='best',
                              title="Std Yield (kg/ha)",
                              frameon=False, fmt="{:.0f}")
             )
cx.add_basemap(ax, source=cx.providers.Stamen.TonerLite, crs=twp_shp.crs.to_string(), attribution_size=0)
# Create spacing from data to map frame
ax.set_xlim(xmin-30000, xmax+30000)
ax.set_ylim(ymin-20000, ymax+20000)
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
# Fix legend labels
current_labels = [t.get_text() for t in ax.get_legend().get_texts()]
new_labels = yf.create_new_labels(current_labels, type = "noround")
yf.update_custom_legend_labels(ax, new_labels)
# Set custom tick positions and labels for the x-axis
xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
xtick_positions = [x * 1e6 for x in xtick_positions]
xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
plt.xticks(xtick_positions, xtick_labels)
ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
ytick_positions = [x * 1e6 for x in ytick_positions]
ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
plt.yticks(ytick_positions, ytick_labels)
plt.savefig(plotDir + '//StdYieldMap.png', bbox_inches='tight', dpi=1200)
plt.show()

# Create map for number of wheat growing years
twp_shp['NumYears'] = df.groupby('TWP_ID').apply(lambda x: len(x['Year'].unique())).values
xmin, ymin, xmax, ymax = twp_shp.total_bounds
fig, ax = plt.subplots(figsize=(9, 7))
twp_shp.plot(column='NumYears', cmap='YlOrRd', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True,
             scheme='naturalbreaks',
             legend_kwds=dict(loc='best',
                              title="Uncertainty (kg/ha)\n95% CI",
                              frameon=False, fmt="{:.0f}")
             )
cx.add_basemap(ax, source=cx.providers.Stamen.TonerLite, crs=twp_shp.crs.to_string(), attribution_size=0)
# Create spacing from data to map frame
ax.set_xlim(xmin-30000, xmax+30000)
ax.set_ylim(ymin-20000, ymax+20000)
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
# Fix legend labels
current_labels = [t.get_text() for t in ax.get_legend().get_texts()]
new_labels = yf.create_new_labels(current_labels, type = "noround")
yf.update_custom_legend_labels(ax, new_labels)
# Set custom tick positions and labels for the x-axis
xtick_positions = [-1.4, -1.2, -1.0, -0.8, -0.6, -0.4, -0.2]
xtick_positions = [x * 1e6 for x in xtick_positions]
xtick_labels = ['115°W', '112°W', '109°W', '106°W', '103°W', '100°W', '97°W']
plt.xticks(xtick_positions, xtick_labels)
ytick_positions = [2.20, 1.96, 1.72, 1.48, 1.24, 1.0]
ytick_positions = [x * 1e6 for x in ytick_positions]
ytick_labels = ['59°N', '57°N', '55°N', '53°N', '51°N', '49°N']
plt.yticks(ytick_positions, ytick_labels)
plt.savefig(plotDir + '//NumberofWheatGrowingYears.png', bbox_inches='tight', dpi=1200)
plt.show()

################### SCATTERPLOT of NDVI vs. TotalYield coloured by CDM ##############################
df_week = df[df['Week'] == 27]
colours = ['#F0F921FF', '#FCA636FF', '#E16462FF', '#B12A90FF', '#6A00A8FF', '#0D0887FF']
cats = ['ND', 'D0','D1','D2', 'D3', 'D4']
fig, ax = plt.subplots(figsize=(9, 7))
for i in list(range(0,6)):
    df_week_cat = df_week[df_week['ModeCDM'] == i].sample(n = 100).sort_values(by='WMeanNdvi').reset_index(drop=True)
    x = df_week_cat['WMeanNdvi']
    y = df_week_cat['TotalYield']
    plt.scatter(x, y, c=colours[i], label = cats[i])
    plt.plot(np.unique(x), np.poly1d(np.polyfit(x, y, 1))(np.unique(x)), c=colours[i], lw=3)

    # xnew = np.linspace(x.min(), x.max(), 2)
    # spl = make_interp_spline(x, y, k=0)
    # power_smooth = spl(xnew)
    # plt.plot(xnew, power_smooth, c=colours[i], lw = 3)
    #plt.show()
ax.set_xlabel('NDVI Anomaly')
ax.set_ylabel('Yield (kg/ha)')
plt.legend()
plt.show()




df_week_nd = df_week[df_week['ModeCDM'] == 0].sample(n = 50)
df_week_d0 = df_week[df_week['ModeCDM'] == 1].sample(n = 50)
df_week_d1 = df_week[df_week['ModeCDM'] == 2].sample(n = 50)
df_week_d2 = df_week[df_week['ModeCDM'] == 3].sample(n = 50)
df_week_d3 = df_week[df_week['ModeCDM'] == 4].sample(n = 50)
df_week_d4 = df_week[df_week['ModeCDM'] == 5].sample(n = 50)
plt.scatter(df_week_nd['WMeanNdvi'], df_week_nd['TotalYield'], c='#F0F921FF', label = "ND")
plt.plot(np.unique(df_week_nd['WMeanNdvi']), make_interp_spline(np.unique(df_week_nd['WMeanNdvi']), df_week_nd['TotalYield'], k=1)(np.linspace(np.unique(df_week_nd['WMeanNdvi']).min(), np.unique(df_week_nd['WMeanNdvi']).max(), 300)), c='#F0F921FF', lw = 3)
plt.scatter(df_week_d0['WMeanNdvi'], df_week_d0['TotalYield'], c='#FCA636FF', label = "D0")
plt.plot(np.unique(df_week_d0['WMeanNdvi']), np.poly1d(np.polyfit(df_week_d0['WMeanNdvi'], df_week_d0['TotalYield'], 1))(np.unique(df_week_d0['WMeanNdvi'])), c='#FCA636FF', lw = 3)
plt.scatter(df_week_d1['WMeanNdvi'], df_week_d1['TotalYield'], c='#E16462FF', label = "D1")
plt.plot(np.unique(df_week_d1['WMeanNdvi']), np.poly1d(np.polyfit(df_week_d1['WMeanNdvi'], df_week_d1['TotalYield'], 1))(np.unique(df_week_d1['WMeanNdvi'])), c='#E16462FF', lw = 3)
plt.scatter(df_week_d2['WMeanNdvi'], df_week_d2['TotalYield'], c='#B12A90FF', label = "D2")
plt.plot(np.unique(df_week_d2['WMeanNdvi']), np.poly1d(np.polyfit(df_week_d2['WMeanNdvi'], df_week_d2['TotalYield'], 1))(np.unique(df_week_d2['WMeanNdvi'])), c='#B12A90FF', lw = 3)
plt.scatter(df_week_d3['WMeanNdvi'], df_week_d3['TotalYield'], c='#6A00A8FF', label = "D3")
plt.plot(np.unique(df_week_d3['WMeanNdvi']), np.poly1d(np.polyfit(df_week_d3['WMeanNdvi'], df_week_d3['TotalYield'], 1))(np.unique(df_week_d3['WMeanNdvi'])), c='#6A00A8FF', lw = 3)
plt.scatter(df_week_d4['WMeanNdvi'], df_week_d4['TotalYield'], c='#0D0887FF', label = "D4")
plt.plot(np.unique(df_week_d4['WMeanNdvi']), np.poly1d(np.polyfit(df_week_d4['WMeanNdvi'], df_week_d4['TotalYield'], 1))(np.unique(df_week_d4['WMeanNdvi'])), c='#0D0887FF', lw = 3)
plt.legend()
plt.show()