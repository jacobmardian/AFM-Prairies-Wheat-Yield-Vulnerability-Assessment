import sys
sys.path.append(r"D:\PhD\YieldProject\Scripts\03_Modelling")
import yieldfunctions as yf
from random import sample
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.feature_selection import r_regression

# User params
accDir = r"D:\PhD\YieldProject\Output_Detrended_Ha\Accuracy"
predDir = r"D:\PhD\YieldProject\Output_Detrended_Ha\Predictions"

df = pd.read_csv(predDir + "//AllPredictions.csv")

##### GET All metrics
d = {'Week': list(range(18,39)), 'NRMSE': np.nan, 'MAE': np.nan, 'R2': np.nan, 'r': np.nan,
     'std68': np.nan,'std95': np.nan, 'std99': np.nan, 'ic68': np.nan, 'ic95': np.nan, 'ic99': np.nan}
df_acc = pd.DataFrame(data = d)
for week in np.unique(df.Week):
    print (week)
    df_week = df[df['Week'] == week]
    # Get all metrics
    obs = df_week['TotalYield']
    bnn_mean = df_week['PredMean']
    bnn_stdev = df_week['PredStd']
    rmse = mean_squared_error(obs, bnn_mean, squared = False) #RMSE
    nrmse = (rmse / (obs.max() - obs.min())) * 100
    mae = mean_absolute_error(obs, bnn_mean)
    r2 = r2_score(obs, bnn_mean)
    r = r_regression(np.asarray(obs).reshape(-1, 1), bnn_mean)
    std68 = ((bnn_stdev / bnn_mean)*100).median() # This would be a percentage - check that it works
    std95 = ((bnn_stdev / bnn_mean)*100).median() * 1.96
    std99 = ((bnn_stdev / bnn_mean)*100).median() * 2.58
    ic68 = yf.interval_coverage(obs, bnn_mean, bnn_stdev, level = 0.68)
    ic95 = yf.interval_coverage(obs, bnn_mean, bnn_stdev, level = 0.95)
    ic99 = yf.interval_coverage(obs, bnn_mean, bnn_stdev, level = 0.99)
    df_acc.loc[df_acc['Week'] == week, df_acc.columns != "Week"] = np.array([nrmse, mae, r2, r, std68, std95, std99, ic68, ic95, ic99])
df_acc.to_csv(accDir + "//AccuracyMetrics.csv", index = False)


